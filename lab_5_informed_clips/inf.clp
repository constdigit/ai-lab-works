; representes game board
(deftemplate board
  ; chips matrix
  (slot top-left(type NUMBER))
  (slot top-mid(type NUMBER))
  (slot top-right(type NUMBER))
  (slot mid-left(type NUMBER))
  (slot mid(type NUMBER))
  (slot mid-right(type NUMBER))
  (slot bottom-left(type NUMBER))
  (slot bottom-mid(type NUMBER))
  (slot bottom-right(type NUMBER))
  ; current node depth
  (slot depth(type NUMBER))
  ; 0 - new state
  ; 1 - treated
  ; 2 - goal
  (slot state(type NUMBER) (default 0))
  ; result of calling heuristic function
  (slot h (type NUMBER))
)

(defglobal
  ?*step* = 0
)

; 0 - manhattan distance
; 1 - wrong placed
(defglobal
  ?*h-type* = 2
)

; get type from user input
(defrule get-type
(declare (salience 101))
  (initial-fact)
=>
  (while (or (< ?*h-type* 0) (> ?*h-type* 1))
    (printout t crlf "0 - h2" crlf "1 - h1" crlf ">>")
    (bind ?*h-type* (read))
  )
)

; heuristic function
(deffunction heuristic(?h ?top-left ?top-mid ?top-right ?mid-right ?bottom-right ?bottom-mid ?bottom-left ?mid-left ?mid)
  (bind ?a ?h)
(if (= ?*h-type* 1)
  then
  ; wrong placed
  (if (not (= ?top-left 1)) then
    (bind ?a (+ 1 ?a))
  )
  (if (not (= ?top-mid 2)) then
    (bind ?a (+ 1 ?a))
  )
  (if (not (= ?top-right 3)) then
    (bind ?a (+ 1 ?a))
  )
  (if (not (= ?mid-left 4)) then
    (bind ?a (+ 1 ?a))
  )
  (if (not (= ?mid 5)) then
    (bind ?a (+ 1 ?a))
  )
  (if (not (= ?mid-right 6)) then
  (bind ?a (+ 1 ?a))
  )
  (if (not (= ?bottom-left 7)) then
  (bind ?a (+ 1 ?a))
  )
  (if (not (= ?bottom-mid 8)) then
    (bind ?a (+ 1 ?a))
  )
 else
 ; manhattan distance
  (switch ?top-left
    (case 0 then (bind ?a (+ 4 ?a)))
    (case 2 then (bind ?a (+ 1 ?a)))
    (case 3 then (bind ?a (+ 2 ?a)))
    (case 4 then (bind ?a (+ 1 ?a)))
    (case 5 then (bind ?a (+ 2 ?a)))
    (case 6 then (bind ?a (+ 3 ?a)))
    (case 7 then (bind ?a (+ 2 ?a)))
    (case 8 then (bind ?a (+ 3 ?a)))
    (default none)
  )
  (switch ?top-mid
    (case 0 then (bind ?a (+ 3 ?a)))
    (case 1 then (bind ?a (+ 1 ?a)))
    (case 3 then (bind ?a (+ 1 ?a)))
    (case 4 then (bind ?a (+ 2 ?a)))
    (case 5 then (bind ?a (+ 1 ?a)))
    (case 6 then (bind ?a (+ 2 ?a)))
    (case 7 then (bind ?a (+ 3 ?a)))
    (case 8 then (bind ?a (+ 2 ?a)))
    (default none)
  )
  (switch ?top-right
    (case 0 then (bind ?a (+ 2 ?a)))
    (case 1 then (bind ?a (+ 2 ?a)))
    (case 2 then (bind ?a (+ 1 ?a)))
    (case 4 then (bind ?a (+ 3 ?a)))
    (case 5 then (bind ?a (+ 2 ?a)))
    (case 6 then (bind ?a (+ 1 ?a)))
    (case 7 then (bind ?a (+ 4 ?a)))
    (case 8 then (bind ?a (+ 3 ?a)))
    (default none)
  )
  (switch ?mid-left
    (case 0 then (bind ?a (+ 3 ?a)))
    (case 1 then (bind ?a (+ 1 ?a)))
    (case 2 then (bind ?a (+ 2 ?a)))
    (case 3 then (bind ?a (+ 3 ?a)))
    (case 5 then (bind ?a (+ 1 ?a)))
    (case 6 then (bind ?a (+ 2 ?a)))
    (case 7 then (bind ?a (+ 1 ?a)))
    (case 8 then (bind ?a (+ 2 ?a)))
    (default none)
  )
  (switch ?mid
    (case 0 then (bind ?a (+ 2 ?a)))
    (case 1 then (bind ?a (+ 2 ?a)))
    (case 2 then (bind ?a (+ 1 ?a)))
    (case 3 then (bind ?a (+ 2 ?a)))
    (case 4 then (bind ?a (+ 1 ?a)))
    (case 6 then (bind ?a (+ 1 ?a)))
    (case 7 then (bind ?a (+ 2 ?a)))
    (case 8 then (bind ?a (+ 1 ?a)))
    (default none)
  )
  (switch ?mid-right
    (case 0 then (bind ?a (+ 1 ?a)))
    (case 1 then (bind ?a (+ 3 ?a)))
    (case 2 then (bind ?a (+ 2 ?a)))
    (case 3 then (bind ?a (+ 1 ?a)))
    (case 4 then (bind ?a (+ 2 ?a)))
    (case 5 then (bind ?a (+ 1 ?a)))
    (case 7 then (bind ?a (+ 3 ?a)))
    (case 8 then (bind ?a (+ 2 ?a)))
    (default none)
  )
  (switch ?bottom-left
    (case 0 then (bind ?a (+ 2 ?a)))
    (case 1 then (bind ?a (+ 2 ?a)))
    (case 2 then (bind ?a (+ 3 ?a)))
    (case 3 then (bind ?a (+ 4 ?a)))
    (case 4 then (bind ?a (+ 1 ?a)))
    (case 5 then (bind ?a (+ 2 ?a)))
    (case 6 then (bind ?a (+ 3 ?a)))
    (case 8 then (bind ?a (+ 1 ?a)))
    (default none)
  )
  (switch ?bottom-mid
    (case 0 then (bind ?a (+ 1 ?a)))
    (case 1 then (bind ?a (+ 3 ?a)))
    (case 2 then (bind ?a (+ 2 ?a)))
    (case 3 then (bind ?a (+ 3 ?a)))
    (case 4 then (bind ?a (+ 2 ?a)))
    (case 5 then (bind ?a (+ 1 ?a)))
    (case 6 then (bind ?a (+ 2 ?a)))
    (case 7 then (bind ?a (+ 1 ?a)))
    (default none)
  )
  (switch ?bottom-right
    (case 1 then (bind ?a (+ 4 ?a)))
    (case 2 then (bind ?a (+ 3 ?a)))
    (case 3 then (bind ?a (+ 2 ?a)))
    (case 4 then (bind ?a (+ 3 ?a)))
    (case 5 then (bind ?a (+ 2 ?a)))
    (case 6 then (bind ?a (+ 1 ?a)))
    (case 7 then (bind ?a (+ 2 ?a)))
    (case 8 then (bind ?a (+ 1 ?a)))
    (default none)
  )
)
  ?a
)

; make begin state
(deffacts start
 (min (heuristic 0 5 8 3 2 1 6 7 4 0))
 (board (top-left 5) (top-mid 8) (top-right 3)
         (mid-left 4)(mid 0) (mid-right 2)
         (bottom-left 7) (bottom-mid 6) (bottom-right 1)
         (depth 0)
         (h (heuristic 0 5 8 3 2 1 6 7 4 0))
  )
)

; delete repeated nodes
(defrule unique
  (declare (salience 1000))
  ?board-1<-(board (top-left ?tl) (top-mid ?tm) (top-right ?tr)
                   (mid-left ?ml) (mid ?m) (mid-right ?mr)
                   (bottom-left ?bl) (bottom-mid ?bm) (bottom-right ?br)
    (h ?x))
  ?board-2<-(board (top-left ?tl) (top-mid ?tm) (top-right ?tr)
                   (mid-left ?ml) (mid ?m) (mid-right ?mr)
                   (bottom-left ?bl) (bottom-mid ?bm) (bottom-right ?br)
    (h ?y&~?x) (state 0))
  (test (< ?x ?y))
=>
  (retract ?board-2)
)

(defrule get-successor-top-left
  (declare (salience 100))
  ?fmin <- (min ?min)
  ?f<-(board (state 0) (depth ?L)
         (top-left 0)    (top-mid ?tm) (top-right ?tr)
     (mid-left ?ml) (mid ?m) (mid-right ?mr)
     (bottom-left ?bl) (bottom-mid ?bm) (bottom-right ?br) (h ?E& :(= ?E ?min)))
=>
  (modify ?f(state 1))
  (bind ?a (heuristic ?E ?tm 0 ?tr ?mr ?br ?bm ?bl ?ml ?m))
  (bind ?*step* (+ ?*step* 1))
  (retract ?fmin)
  (assert (min =(+ ?a 2)))
  (assert (board (top-left ?tm) (top-mid 0) (top-right ?tr)
                 (mid-left ?ml) (mid ?m) (mid-right ?mr)
                 (bottom-left ?bl) (bottom-mid ?bm) (bottom-right ?br)
                 (depth (+ ?L 1)) (h ?a)
         )
  )
  (assert (board (top-left ?ml) (top-mid ?tm) (top-right ?tr)
                (mid-left 0) (mid ?m) (mid-right ?mr)
                (bottom-left ?bl) (bottom-mid ?bm) (bottom-right ?br)
                (depth (+ ?L 1)) (h (heuristic ?E ?ml ?tm ?tr ?mr ?br ?bm ?bl 0 ?m))
         )
   )
)

(defrule get-successor-top-mid
  (declare (salience 100))
  ?fmin<-(min ?min)
  ?f<-(board (state 0) (depth ?L)
         (top-left ?tl)    (top-mid 0) (top-right ?tr)
     (mid-left ?ml) (mid ?m) (mid-right ?mr)
     (bottom-left ?bl) (bottom-mid ?bm) (bottom-right ?br) (h ?E& :(= ?E ?min)))
=>
  (modify ?f(state 1))
  (bind ?a (heuristic ?E 0 ?tl ?tr ?mr ?br ?bm ?bl ?ml ?m))
  (bind ?*step* (+ ?*step* 1))
  (retract ?fmin)
  (assert (min =(+ ?a 2)))
  (assert (board (top-left 0) (top-mid ?tl) (top-right ?tr)
                 (mid-left ?ml) (mid ?m) (mid-right ?mr)
                 (bottom-left ?bl) (bottom-mid ?bm) (bottom-right ?br)
                 (depth (+ ?L 1)) (h ?a)
          )
  )
  (assert (board (top-left ?tl) (top-mid ?m) (top-right ?tr)
                 (mid-left ?ml) (mid 0) (mid-right ?mr)
                 (bottom-left ?bl) (bottom-mid ?bm) (bottom-right ?br)
                 (depth (+ ?L 1)) (h (heuristic ?E ?tl ?m ?tr ?mr ?br ?bm ?bl ?ml 0))
          )
  )
  (assert (board (top-left ?tl) (top-mid ?tr) (top-right 0)
                 (mid-left ?ml) (mid ?m) (mid-right ?mr)
                 (bottom-left ?bl) (bottom-mid ?bm) (bottom-right ?br)
                 (depth (+ ?L 1))(h (heuristic ?E ?tl ?tr 0 ?mr ?br ?bm ?bl ?ml ?m))
          )
  )
)

(defrule get-successor-top-right
  (declare (salience 100))
  ?fmin<-(min ?min)
  ?f<-(board (state 0) (depth ?L)
         (top-left ?tl)    (top-mid ?tm) (top-right 0)
     (mid-left ?ml) (mid ?m) (mid-right ?mr)
     (bottom-left ?bl) (bottom-mid ?bm) (bottom-right ?br) (h ?E& :(= ?E ?min)))
=>
 (modify ?f(state 1))
 (bind ?a (heuristic ?E ?tl 0 ?tm ?mr ?br ?bm ?bl ?ml ?m))
 (bind ?*step* (+ ?*step* 1))
 (retract ?fmin)
 (assert (min =(+ ?a 2)))
 (assert (board (top-left ?tl) (top-mid 0) (top-right ?tm)
                (mid-left ?ml) (mid ?m) (mid-right ?mr)
                (bottom-left ?bl) (bottom-mid ?bm) (bottom-right ?br)
                (depth (+ ?L 1)) (h ?a)
         )
 )
 (assert (board (top-left ?tl) (top-mid ?tm) (top-right ?mr)
                (mid-left ?ml) (mid ?m) (mid-right 0)
                (bottom-left ?bl) (bottom-mid ?bm) (bottom-right ?br)
                (depth (+ ?L 1)) (h (heuristic ?E ?tl ?tm ?mr 0 ?br ?bm ?bl ?ml ?m))
         )
  )
)

(defrule get-successor-mid-left
  (declare (salience 100))
  ?fmin<-(min ?min)
  ?f<-(board (state 0) (depth ?L)
         (top-left ?tl)    (top-mid ?tm) (top-right ?tr)
     (mid-left 0) (mid ?m) (mid-right ?mr)
     (bottom-left ?bl) (bottom-mid ?bm) (bottom-right ?br) (h ?E& :(= ?E ?min)))
=>
 (modify ?f(state 1))
 (bind ?a (heuristic ?E 0 ?tm ?tr ?mr ?br ?bm ?bl ?tl ?m))
 (bind ?*step* (+ ?*step* 1))
 (retract ?fmin)
 (assert (min =(+ ?a 2)))
 (assert (board (top-left 0) (top-mid ?tm) (top-right ?tr)
                (mid-left ?tl) (mid ?m) (mid-right ?mr)
                (bottom-left ?bl) (bottom-mid ?bm) (bottom-right ?br)
                (depth (+ ?L 1)) (h ?a)
         )
 )
 (assert (board (top-left ?tl) (top-mid ?tm) (top-right ?tr)
                (mid-left ?m) (mid 0) (mid-right ?mr)
                (bottom-left ?bl) (bottom-mid ?bm) (bottom-right ?br)
                (depth (+ ?L 1)) (h (heuristic ?E ?tl ?tm ?tr ?mr ?br ?bm ?bl ?m 0))
         )
  )
 (assert (board (top-left ?tl) (top-mid ?tm) (top-right ?tr)
                (mid-left ?bl) (mid ?m) (mid-right ?mr)
                (bottom-left 0) (bottom-mid ?bm) (bottom-right ?br)
                (depth (+ ?L 1)) (h (heuristic ?E ?tl ?tm ?tr ?mr ?br ?bm 0 ?bl ?m))
         )
  )
)

(defrule get-successor-mid
  (declare (salience 100))
  ?fmin<-(min ?min)
  ?f<-(board (state 0) (depth ?L)
         (top-left ?tl)    (top-mid ?tm) (top-right ?tr)
     (mid-left ?ml) (mid 0) (mid-right ?mr)
     (bottom-left ?bl) (bottom-mid ?bm) (bottom-right ?br) (h ?E& :(= ?E ?min)))
=>
 (modify ?f(state 1))
 (bind ?a (heuristic ?E ?tl 0 ?tr ?mr ?br ?bm ?bl ?ml ?tm))
 (bind ?*step* (+ ?*step* 1))
 (retract ?fmin)
 (assert (min =(+ ?a 2)))
 (assert (board (top-left ?tl) (top-mid 0) (top-right ?tr)
                (mid-left ?ml) (mid ?tm) (mid-right ?mr)
                (bottom-left ?bl) (bottom-mid ?bm) (bottom-right ?br)
                (depth (+ ?L 1)) (h ?a)
         )
 )
 (assert (board (top-left ?tl) (top-mid ?tm) (top-right ?tr)
                (mid-left ?ml) (mid ?mr) (mid-right 0)
                (bottom-left ?bl) (bottom-mid ?bm) (bottom-right ?br)
                (depth (+ ?L 1)) (h (heuristic ?E ?tl ?tm ?tr 0 ?br ?bm ?bl ?ml ?mr))
         )
  )
 (assert (board (top-left ?tl) (top-mid ?tm) (top-right ?tr)
                (mid-left ?ml) (mid ?bm) (mid-right ?mr)
                (bottom-left ?bl) (bottom-mid 0) (bottom-right ?br)
                (depth (+ ?L 1)) (h (heuristic ?E ?tl ?tm ?tr ?mr ?br 0 ?bl ?ml ?bm))
         )
  )
 (assert (board (top-left ?tl) (top-mid ?tm) (top-right ?tr)
                (mid-left 0) (mid ?ml) (mid-right ?mr)
                (bottom-left ?bl) (bottom-mid ?bm) (bottom-right ?br)
                (depth (+ ?L 1)) (h (heuristic ?E ?tl ?tm ?tr ?mr ?br ?bm ?bl 0 ?ml))
         )
  )
)

(defrule get-successor-mid-right
  (declare (salience 100))
  ?fmin<-(min ?min)
  ?f<-(board (state 0) (depth ?L)
         (top-left ?tl)    (top-mid ?tm) (top-right ?tr)
     (mid-left ?ml) (mid ?m) (mid-right 0)
     (bottom-left ?bl) (bottom-mid ?bm) (bottom-right ?br) (h ?E& :(= ?E ?min)))
=>
 (modify ?f(state 1))
 (bind ?a (heuristic ?E ?tl ?tm 0 ?tr ?br ?bm ?bl ?ml ?m))
 (bind ?*step* (+ ?*step* 1))
 (retract ?fmin)
 (assert (min =(+ ?a 2)))
 (assert (board (top-left ?tl) (top-mid ?tm) (top-right 0)
                (mid-left ?ml) (mid ?m) (mid-right ?tr)
                (bottom-left ?bl) (bottom-mid ?bm) (bottom-right ?br)
                (depth (+ ?L 1)) (h ?a)
         )
 )
 (assert (board (top-left ?tl) (top-mid ?tm) (top-right ?tr)
                (mid-left ?ml) (mid 0) (mid-right ?m)
                (bottom-left ?bl) (bottom-mid ?bm) (bottom-right ?br)
                (depth (+ ?L 1)) (h (heuristic ?E ?tl ?tm ?tr ?m ?br ?bm ?bl ?ml 0))
         )
  )
 (assert (board (top-left ?tl) (top-mid ?tm) (top-right ?tr)
                (mid-left ?ml) (mid ?m) (mid-right ?br)
                (bottom-left ?bl) (bottom-mid ?bm) (bottom-right 0)
                (depth (+ ?L 1)) (h (heuristic ?E ?tl ?tm ?tr ?br 0 ?bm ?bl ?ml ?m))
         )
  )
)

(defrule get-successor-bottom-left
  (declare (salience 100))
  ?fmin<-(min ?min)
  ?f<-(board (state 0) (depth ?L)
         (top-left ?tl)    (top-mid ?tm) (top-right ?tr)
     (mid-left ?ml) (mid ?m) (mid-right ?mr)
     (bottom-left 0) (bottom-mid ?bm) (bottom-right ?br) (h ?E& :(= ?E ?min)))
=>
 (modify ?f(state 1))
 (bind ?a (heuristic ?E ?tl ?tm ?tr ?mr ?br ?bm ?ml 0 ?m))
 (bind ?*step* (+ ?*step* 1))
 (retract ?fmin)
 (assert (min =(+ ?a 2)))
 (assert (board (top-left ?tl) (top-mid ?tm) (top-right ?tr)
                (mid-left 0) (mid ?m) (mid-right ?mr)
                (bottom-left ?ml) (bottom-mid ?bm) (bottom-right ?br)
                (depth (+ ?L 1)) (h ?a)
         )
 )
 (assert (board (top-left ?tl) (top-mid ?tm) (top-right ?tr)
                (mid-left ?ml) (mid ?m) (mid-right ?mr)
                (bottom-left ?bm) (bottom-mid 0) (bottom-right ?br)
                (depth (+ ?L 1)) (h (heuristic ?E ?tl ?tm ?tr ?mr ?br 0 ?bm ?ml ?m))
         )
  )
)

(defrule get-successor-bottom-mid
  (declare (salience 100))
  ?fmin<-(min ?min)
  ?f<-(board (state 0) (depth ?L)
         (top-left ?tl)    (top-mid ?tm) (top-right ?tr)
     (mid-left ?ml) (mid ?m) (mid-right ?mr)
     (bottom-left ?bl) (bottom-mid 0) (bottom-right ?br) (h ?E& :(= ?E ?min)))
=>
 (modify ?f(state 1))
 (bind ?a (heuristic ?E ?tl ?tm ?tr ?mr ?br ?bl 0 ?ml ?m))
 (bind ?*step* (+ ?*step* 1))
 (retract ?fmin)
 (assert (min =(+ ?a 2)))
 (assert (board (top-left ?tl) (top-mid ?tm) (top-right ?tr)
                (mid-left ?ml) (mid ?m) (mid-right ?mr)
                (bottom-left 0) (bottom-mid ?bl) (bottom-right ?br)
                (depth (+ ?L 1)) (h ?a)
         )
 )
 (assert (board (top-left ?tl) (top-mid ?tm) (top-right ?tr)
                (mid-left ?ml) (mid 0) (mid-right ?mr)
                (bottom-left ?bl) (bottom-mid ?m) (bottom-right ?br)
                (depth (+ ?L 1)) (h (heuristic ?E ?tl ?tm ?tr ?mr ?br ?m ?bl ?ml 0))
         )
  )
 (assert (board (top-left ?tl) (top-mid ?tm) (top-right ?tr)
                (mid-left ?ml) (mid ?m) (mid-right ?mr)
                (bottom-left ?bl) (bottom-mid ?br) (bottom-right 0)
                (depth (+ ?L 1)) (h (heuristic ?E ?tl ?tm ?tr ?mr 0 ?br ?bl ?ml ?m))
         )
  )
)

(defrule get-successor-bottom-right
  (declare (salience 100))
  ?fmin<-(min ?min)
  ?f<-(board (state 0) (depth ?L)
         (top-left ?tl)    (top-mid ?tm) (top-right ?tr)
     (mid-left ?ml) (mid ?m) (mid-right ?mr)
     (bottom-left ?bl) (bottom-mid ?bm) (bottom-right 0) (h ?E& :(= ?E ?min)))
=>
 (modify ?f(state 1))
 (bind ?a (heuristic ?E ?tl ?tm ?tr 0 ?mr ?bm ?bl ?ml ?m))
 (bind ?*step* (+ ?*step* 1))
 (retract ?fmin)
 (assert (min =(+ ?a 2)))
 (assert (board (top-left ?tl) (top-mid ?tm) (top-right ?tr)
                (mid-left ?ml) (mid ?m) (mid-right 0)
                (bottom-left ?bl) (bottom-mid ?bm) (bottom-right ?mr)
                (depth (+ ?L 1)) (h ?a)
         )
 )
 (assert (board (top-left ?tl) (top-mid ?tm) (top-right ?tr)
                (mid-left ?ml) (mid ?m) (mid-right ?mr)
                (bottom-left ?bl) (bottom-mid 0) (bottom-right ?bm)
                (depth (+ ?L 1)) (h (heuristic ?E ?tl ?tm ?tr ?mr ?bm 0 ?bl ?ml ?m))
         )
  )
)

; find node with minimal h value
(defrule find-min
  (declare (salience 150))
  ?fmin<-(min ?min)
  (board (h ?E& :(< ?E ?min)) (state 0))
=>
 (retract ?fmin)
 (assert (min ?E))
)

; comparison with goal state
(defrule is-goal
  (declare (salience 500))
  ?f<-(board (top-left 1)    (top-mid 2) (top-right 3)
     (mid-left 4) (mid 5) (mid-right 6)
     (bottom-left 7) (bottom-mid 8) (bottom-right 0) (state ~2))
=>
  (printout t "Goal found on depth = " (fact-slot-value ?f depth) crlf)
  (printout t "Opened nodes count =  " ?*step* crlf)
  (modify ?f(state 2))
)

; free unused nodes
(defrule delete-not-answer
  (declare (salience 400))
  (board (state 2))
  ?f<-(board (state ~2))
=>
  (retract ?f)
)

(defrule not-found
  (declare (salience 200))
  (not (board(state 0|2)))
=>
  (halt)
  (printout t "Goal not found" crlf)
)

(defrule stop
  (declare (salience 200))
  (board(state 2))
=>
  (halt)
)
